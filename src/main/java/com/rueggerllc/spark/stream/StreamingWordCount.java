package com.rueggerllc.spark.stream;

import java.util.Arrays;
import java.util.Iterator;
import java.util.regex.Pattern;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.api.java.function.VoidFunction;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import scala.Tuple2;

public class StreamingWordCount {
	
	private static final Logger logger = Logger.getLogger(StreamingWordCount.class);
	private static final Pattern SPACE = Pattern.compile(" ");

	
    public static void main(String[] args) throws Exception {
        Logger.getLogger("org").setLevel(Level.ERROR);
        
        logger.info("StreamingWordCount BEGIN");
	   
	    if (args.length < 2) {
	    	System.err.println("Usage: StreamingWordCount <hostname> <port>");
	    	logger.error("Usage: StreamingWordCount <hostname> <port>");
	    	System.exit(1);
	    }
	    
	    String host = args[0];
	    String port = args[1];
	    logger.info("host=" + host);
	    logger.info("port=" + port);


	    // Create the context with a 1 second batch size
	    SparkConf sparkConf = new SparkConf().setAppName("StreamingWordCount").setMaster("local[*]");
	    // SparkConf sparkConf = new SparkConf().setAppName("StreamingWorCount");
	    sparkConf.set("spark.driver.allowMultipleContexts","true");
	    sparkConf.set("spark.streaming.stopGracefullyOnShutdown","true");
	    JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(2000));

	    // DStream: 
	    // Create a JavaReceiverInputDStream on target ip:port and count the
	    // words in input stream of \n delimited text (eg. generated by 'nc')
	    // Note that no duplication in storage level only for running locally.
	    // Replication necessary in distributed scenario for fault tolerance.
	    JavaReceiverInputDStream<String> lines = ssc.socketTextStream(host, Integer.parseInt(port), StorageLevels.MEMORY_AND_DISK_SER);
	    
	    JavaPairDStream<String,Integer> wordCounts = lines
	    	.flatMap(new MyFlatMapFunction())
	    	.mapToPair(new MyPairFunction())
	    	.reduceByKey(new MyReduceFunction());

	    // Display Output
	    wordCounts.foreachRDD(new MyVoidFunctionForRDD());
	    wordCounts.print(20);
	    
	    // Start Program
	    ssc.start();
	    ssc.awaitTermination();
	    
	    if (ssc != null) {
	    	ssc.close();
	    }
        logger.info("StreamingWordCount END");
    }
    

    
    private static class MyFlatMapFunction implements FlatMapFunction<String,String> {
		@Override
		public Iterator<String> call(String line) throws Exception {
			return Arrays.asList(SPACE.split(line)).iterator();
		}
    }
    
    private static class MyPairFunction implements PairFunction<String,String,Integer> {
		@Override
		public Tuple2<String, Integer> call(String s) throws Exception {
			return new Tuple2<String,Integer>(s,1);
		}
     }
    
    private static class MyReduceFunction implements Function2<Integer,Integer,Integer> {
		@Override
		public Integer call(Integer v1, Integer v2) throws Exception {
			return v1 + v2;
		}
    }
    
    public static class MyVoidFunctionForRDD implements VoidFunction<JavaPairRDD<String,Integer>> {
		@Override
		public void call(JavaPairRDD<String, Integer> pairRDD) throws Exception {
			if (pairRDD.count() == 0) {
				System.out.println("EMPTY RDD");
				return;
			} else {
				System.out.println("GOT RDD");
       	        pairRDD.foreach(nextTuple2 -> {
    	        	System.out.println("LAMDA: " + nextTuple2._1 + "=" + nextTuple2._2);
    	        });	
				pairRDD.foreach(new MyVoidFunctionForTuple2());
			}
			
		}
    }
    
    public static class MyVoidFunctionForTuple2 implements VoidFunction<Tuple2<String,Integer>> {

		@Override
		public void call(Tuple2<String, Integer> tuple) throws Exception {
			System.out.println("FUNCTION: " + tuple._1 + "," + tuple._2);
		}
    }
    
    // Using Lambda Expressions
    private void doLambdaSolution( JavaReceiverInputDStream<String> lines) {
	    JavaDStream<String> words = lines.flatMap(x -> Arrays.asList(SPACE.split(x)).iterator()); 
	    JavaPairDStream<String, Integer> wordCounts = words.mapToPair(s -> new Tuple2<>(s, 1)).reduceByKey((i1, i2) -> i1 + i2);    	
    }   
    
    
}